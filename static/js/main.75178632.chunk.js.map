{"version":3,"sources":["actions/actions.js","utils/weatherUtils.js","services/weatherService.js","components/molecules/CitiesList.js","components/atoms/TemperatureText.js","components/atoms/DayNameText.js","components/atoms/WeatherImage.js","components/molecules/WeatherInfo.js","components/molecules/ExtraWeather.js","components/atoms/WelcomeText.js","components/organisms/WeatherMain.js","utils/cities.js","components/pages/WheaterPage.js","App.js","serviceWorker.js","reducer/WeatherReducer.js","index.js","components/atoms/WeatherImage.module.css"],"names":["setIsLoadingValue","isLoadingValue","type","payload","moment","extendMoment","Moment","extractCurrentWeatherInfo","current","id","uuidv4","weather","temperature","temp","toFixed","dayName","convertEpochToDate","dt","extractForecastedWeatherInfo","daily","slice","lenght","map","item","day","epochTime","unix","format","getFivePreviousUnixTime","range","subtract","Array","from","by","baseURL","appId","getHistoricalWeatherByDate","lat","lon","unixTime","axios","get","then","response","data","catch","error","console","log","CitiesList","cities","useState","selectedIndex","setSelectedIndex","dispatch","useDispatch","handleSelectedCity","event","index","a","getCurrentWeatherService","coord","Promise","all","time","getHistoricalWeatherService","List","component","city","ListItem","key","button","selected","onClick","ListItemText","inset","primary","name","useLargeStyles","makeStyles","root","fontWeight","fontSize","color","grey","useSmallStyles","TemperatureText","isLarge","children","largeClasses","smallClasses","Typography","className","DayTimeText","WeatherImage","icon","description","link","styles","large","small","src","alt","WeatherInfo","Grid","container","justify","alignItems","direction","ExtraWeather","weatherList","alignContent","spacing","Card","CardContent","WelcomeText","titleStyle","subTitleStyle","WeatherMain","containerStyle","width","setDayName","currentTemp","setCurrentTemp","showHistoricalDays","setShowHistoricalDays","showForecastedDays","setShowForecastedDays","useSelector","state","currentWeather","forecastedWeather","historicalWeather","isLoading","useEffect","isEmpty","loadedInfo","FormGroup","row","FormControlLabel","control","Checkbox","checked","onChange","label","style","size","sortedCitiesList","orderBy","WheaterPage","mainContainer","height","weatherContainerStyle","background","padding","cardStyle","display","justifyContent","xs","sm","md","App","Boolean","window","location","hostname","match","initialState","selectedCity","weatherReducer","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"2PAoBaA,EAAoB,SAACC,GAAD,MAAqB,CACpDC,KAAM,uBACNC,QAASF,I,oFClBLG,EAASC,uBAAaC,KAEfC,EAA4B,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,MAAkB,CACzDC,GAAIC,cACJC,QAASH,EAAQG,QAAQ,GACzBC,YAAaJ,EAAQK,KAAKC,QAAQ,GAAK,QACvCC,QAASC,EAAmBR,EAAQS,MAGzBC,EAA+B,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAC1C,YAAIA,GAAOC,MAAM,EAAGD,EAAME,QAAQC,KAAI,SAACC,GAAD,MAAW,CAC/Cd,GAAIC,cACJK,QAASC,EAAmBO,EAAKN,IACjCL,YAAaW,EAAKV,KAAKW,IAAIV,QAAQ,GAAK,QACxCH,QAASY,EAAKZ,QAAQ,QAWbK,EAAqB,SAACS,GAAD,OAChCrB,EAAOsB,KAAKD,GAAWE,OAAO,WAEnBC,EAA0B,WACrC,IAAMC,EAAQzB,EAAOyB,MACnBzB,IAAS0B,SAAS,EAAG,OACrB1B,IAAS0B,SAAS,EAAG,QAGvB,OAD0BC,MAAMC,KAAKH,EAAMI,GAAG,QACrBX,KAAI,SAACC,GAAD,OAAUnB,EAAOmB,GAAMI,OAAO,SCxBvDO,EAAU,kDACVC,EAAQ,mCAiBRC,EAA6B,SAACC,EAAKC,EAAKC,GAAX,OACjCC,IACGC,IADH,UAEOP,EAFP,4BAEkCG,EAFlC,gBAE6CC,EAF7C,eAEuDC,EAFvD,+BAEsFJ,IAEnFO,MAAK,SAACC,GAAD,OAAcA,EAASC,QAC5BC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAI,QAASF,OCc5BG,EA1CI,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACSC,mBAAS,MADlB,mBAC1BC,EAD0B,KACXC,EADW,KAG3BC,EAAWC,cAEXC,EAAqB,SAACC,EAAOC,GACjCJ,EAAStD,GAAkB,IAC3BqD,EAAiBK,GACjBJ,EHlBsC,CACxCpD,KAAM,oBACNC,QGgB2B+C,EAAOQ,KAChCJ,EDFoC,SAAC,GAAD,IAAGjB,EAAH,EAAGA,IAAKC,EAAR,EAAQA,IAAR,8CAAkB,WAAOgB,GAAP,SAAAK,EAAA,+EACjDnB,IACJC,IADI,UAEAP,EAFA,gBAEeG,EAFf,gBAE0BC,EAF1B,uDAE4EH,IAEhFO,MAAK,SAACC,GACLW,EAAStD,GAAkB,IAC3BsD,EFTgD,CACpDpD,KAAM,sBACNC,QEO+BI,EAA0BoC,EAASC,QAC9DU,EFpBoD,CACxDpD,KAAM,uBACNC,QEmB2Be,EAA6ByB,EAASC,WAG9DC,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAI,QAASF,OAZe,2CAAlB,sDCE3Bc,CAAyBV,EAAOQ,GAAOG,QAChDP,EDoBuC,SAAC,GAAD,IAAEjB,EAAF,EAAEA,IAAKC,EAAP,EAAOA,IAAP,8CAAgB,WAAOgB,GAAP,SAAAK,EAAA,sDACzDG,QAAQC,IACNnC,IAA0BN,KAAI,SAAC0C,GAAD,OAC5B5B,EAA2BC,EAAKC,EAAK0B,OAGtCtB,MAAK,SAACC,GAAD,OACJW,EFrCsD,CAC1DpD,KAAM,yBACNC,QEmC+DwC,EDzBzCrB,KAAI,SAACC,GAAD,MAAW,CACnCd,GAAIC,cACJK,QAASC,EAAmBO,EAAKf,QAAQS,IACzCL,YAAaW,EAAKf,QAAQK,KAAKC,QAAQ,GAAK,QAC5CH,QAASY,EAAKf,QAAQG,QAAQ,YCuB7BkC,OAAM,SAACC,GAAD,OAAWA,KATqC,2CAAhB,sDCpB9BmB,CAA4Bf,EAAOQ,GAAOG,SAGrD,OACE,kBAACK,EAAA,EAAD,CAAMC,UAAU,OACbjB,EAAO5B,KAAI,SAAC8C,EAAMV,GAAP,OACV,kBAACW,EAAA,EAAD,CACEC,IAAKF,EAAK3D,GACV8D,QAAM,EACNC,SAAUpB,IAAkBM,EAC5Be,QAAS,SAAChB,GAAD,OAAWD,EAAmBC,EAAOC,KAE9C,kBAACgB,EAAA,EAAD,CAAcC,OAAK,EAACC,QAASR,EAAKS,a,2CC3BtCC,EAAiBC,YAAW,CAC9BC,KAAM,CACFC,WAAW,IACXC,SAAU,IACVC,MAAOC,IAAK,QAIdC,EAAiBN,YAAW,CAC9BC,KAAM,CACFE,SAAU,GACVC,MAAOC,IAAK,QAeLE,EAZS,SAAC,GAA+B,IAAD,IAA7BC,eAA6B,SAAdC,EAAc,EAAdA,SACnCC,EAAeX,IACfY,EAAeL,IAErB,OAAO,kBAACM,EAAA,EAAD,CAAYC,UAAWL,EAAUE,EAAaT,KAAMU,EAAaV,MAAOQ,IClBzEV,EAAiBC,YAAW,CAC9BC,KAAM,CACFE,SAAU,GACVC,MAAOC,IAAK,QAIdC,EAAiBN,YAAW,CAC9BC,KAAM,CACFE,SAAU,GACVC,MAAOC,IAAK,QAeLS,EAXK,SAAC,GAAgC,IAA/BL,EAA8B,EAA9BA,SAA8B,IAApBD,eAAoB,SAC1CE,EAAeX,IACfY,EAAeL,IACrB,OAAO,kBAACM,EAAA,EAAD,CAAYC,UAAWL,EAAUE,EAAaT,KAAOU,EAAaV,MAAOQ,I,iBCArEM,EAlBM,SAAC,GAAgD,IAAD,IAA7CC,YAA6C,MAAxC,GAAwC,MAApCC,mBAAoC,MAAxB,GAAwB,MAApBT,eAAoB,SAC/DU,EAAI,2CAAuCF,EAAvC,WAER,OACE,yBACEH,UAAWL,EAAUW,IAAOC,MAAQD,IAAOE,MAC3CC,IAAKJ,EACLK,IAAKN,KCoBIO,EAxBK,SAAC,GAAgD,IAA9CxF,EAA6C,EAA7CA,QAASH,EAAoC,EAApCA,YAAaD,EAAuB,EAAvBA,QAAS4E,EAAc,EAAdA,QACpD,OACE,kBAACiB,EAAA,EAAD,CAAMC,WAAS,EAACC,QAAQ,SAASC,WAAW,SAASC,UAAU,UAC7D,kBAAC,EAAD,CAAarB,QAASA,GAAUxE,GAChC,kBAAC,EAAD,CACEgF,KAAMpF,EAAQoF,KACdC,YAAarF,EAAQqF,YACrBT,QAASA,IAEX,kBAAC,EAAD,CAAiBA,QAASA,GAAU3E,KC2B3BiG,EAtCM,SAAC,GAAqB,IAAnBC,EAAkB,EAAlBA,YACtB,OACE,kBAACN,EAAA,EAAD,CAAMC,WAAS,EAACM,aAAa,gBAAgBL,QAAQ,SAASM,QAAS,GACpEF,EAAYxF,KAAI,SAACC,GAAU,IAClBR,EAAsCQ,EAAtCR,QAASH,EAA6BW,EAA7BX,YAAaD,EAAgBY,EAAhBZ,QAASF,EAAOc,EAAPd,GACvC,OACE,kBAAC+F,EAAA,EAAD,CAAMlC,IAAK7D,EAAIc,MAAI,GACjB,kBAAC0F,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,CACEnG,QAASA,EACTH,YAAaA,EACbD,QAASA,EACT4E,SAAS,Y,QCSZ4B,EAvBK,WAChB,IAAMC,EAAarC,YAAW,CAC1BC,KAAK,CACDE,SAAS,GACTD,WAAY,IACZE,MAAMC,IAAK,OAJAL,GAQbsC,EAAgBtC,YAAW,CAC7BC,KAAK,CACDE,SAAS,GACTD,WAAY,IACZE,MAAMC,IAAK,OAJGL,GAQtB,OAAO,oCACH,kBAACY,EAAA,EAAD,CAAYC,UAAWwB,EAAWpC,MAAlC,8BACA,kBAACW,EAAA,EAAD,CAAYC,UAAWyB,EAAcrC,MAArC,uC,SCwFOsC,GA/FK,WAClB,IAAMC,EAAiBxC,YAAW,CAChCC,KAAM,CACJwC,MAAO,SAFYzC,GADC,EAOM5B,mBAAS,IAPf,mBAOjBpC,EAPiB,KAOR0G,EAPQ,OAQctE,mBAAS,IARvB,mBAQjBuE,EARiB,KAQJC,EARI,OAS4BxE,oBAAS,GATrC,mBASjByE,EATiB,KASGC,EATH,OAU4B1E,oBAAS,GAVrC,mBAUjB2E,EAViB,KAUGC,EAVH,OAiBpBC,aAAY,SAACC,GAAD,MAAY,CAC1BC,eAAgBD,EAAMC,eACtBC,kBAAmBF,EAAME,kBACzBC,kBAAmBH,EAAMG,kBACzBC,UAAWJ,EAAMI,cARjBH,EAbsB,EAatBA,eACAC,EAdsB,EActBA,kBACAC,EAfsB,EAetBA,kBACAC,EAhBsB,EAgBtBA,UAQFC,qBAAU,WACHC,kBAAQL,KACXP,EAAeO,EAAetH,aAC9B6G,EAAWS,EAAenH,YAE3B,CAACmH,IAEJ,IAAMM,EACJ,oCACE,kBAAC,EAAD,CACEzH,QAASA,EACTH,YAAa8G,EACb/G,QAASuH,EAAevH,QACxB4E,SAAS,IAEX,kBAACkD,EAAA,EAAD,CAAWC,KAAG,GACZ,kBAACC,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEC,QAASlB,EACTmB,SAAU,WACRlB,GAAuBD,GACvBG,GAAsB,IAExBlD,KAAK,WACLM,MAAM,YAGV6D,MAAM,4BAER,kBAACL,EAAA,EAAD,CACEC,QACE,kBAACC,EAAA,EAAD,CACEC,QAAShB,EACTiB,SAAU,WACRhB,GAAuBD,GACvBD,GAAsB,IAExBhD,KAAK,WACLM,MAAM,YAGV6D,MAAM,+BAGV,6BACCpB,GAAsB,kBAAC,EAAD,CAAcd,YAAasB,IACjDN,GAAsB,kBAAC,EAAD,CAAchB,YAAaqB,KAItD,OACE,kBAAC3B,EAAA,EAAD,CACEZ,UAAW2B,EAAevC,KAC1ByB,WAAS,EACTlF,MAAI,EACJoF,WAAW,SACXC,UAAU,UAET2B,kBAAQL,GACP,kBAAC,EAAD,MACEG,EAEF,kBAAC,sBAAD,CAAoBY,MAAO,GAAIC,KAAK,QAAQ/D,MAAOC,IAAK,OAExDoD,ICrBKW,GAAmBC,kBAlFjB,CAAC,CACZ,GAAM,QACN,KAAQ,QACR,MAAS,CACP,KAAQ,UACR,KAAQ,SAGZ,CACE,GAAM,QACN,KAAQ,YACR,MAAS,CACP,KAAQ,UACR,KAAQ,UAGZ,CACE,GAAM,QACN,KAAQ,SACR,MAAS,CACP,KAAQ,OACR,IAAO,WAGX,CACE,GAAM,QACN,KAAQ,gBACR,MAAS,CACP,KAAQ,UACR,IAAO,YAGX,CACE,GAAM,QACN,KAAQ,SACR,MAAS,CACP,KAAQ,QACR,IAAO,YAGX,CACE,GAAM,QACN,KAAQ,SACR,MAAS,CACP,KAAQ,UACR,IAAO,YAGX,CACE,GAAM,QACN,KAAQ,QACR,MAAS,CACP,IAAO,QACP,IAAO,YAGX,CACE,GAAM,QACN,KAAQ,QACR,MAAS,CACP,KAAQ,UACR,IAAO,YAGX,CACE,GAAM,QACN,KAAQ,YACR,MAAS,CACP,IAAO,QACP,IAAO,YAGX,CACE,GAAM,QACN,KAAQ,aACR,MAAS,CACP,KAAQ,QACR,IAAO,aAKkC,CAAC,QAAS,CAAC,QClC3CC,GAzCK,WAEhB,IAAMC,EAAgBvE,YAAW,CAC7BC,KAAK,CACDuE,OAAQ,UAFMxE,GAMhByE,EAAwBzE,YAAW,CACrCC,KAAK,CACDwC,MAAO,OACPiC,WAAYrE,IAAK,KACjBsE,QAAS,KAJa3E,GAQxB4E,EAAY5E,YAAW,CACzBC,KAAM,CACFwC,MAAO,OACPoC,QAAS,OACTjD,WAAY,SACZkD,eAAgB,SAChBJ,WAAWrE,IAAK,OANNL,GAUlB,OAAO,oCACH,kBAACyB,EAAA,EAAD,CAAMZ,UAAW0D,EAActE,KAAMyB,WAAS,GAC1C,kBAACD,EAAA,EAAD,CAAMjF,MAAI,EAACuI,GAAI,GAAIC,GAAI,GAAIC,GAAI,GAC3B,kBAAC,EAAD,CAAY9G,OAAQiG,MAExB,kBAAC3C,EAAA,EAAD,CAAMZ,UAAW4D,EAAsBxE,KAAMyB,WAAS,EAAClF,MAAI,EAACyI,GAAI,IAC5D,kBAAC/C,EAAA,EAAD,CAAMrB,UAAW+D,EAAU3E,MACvB,kBAACkC,EAAA,EAAD,KACI,kBAAC,GAAD,YCnCT+C,OAJf,WACE,OAAO,kBAAC,GAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,6BClBAC,GAAe,CACnBC,aAAc,GACdtC,eAAgB,GAChBC,kBAAmB,CAAC,IACpBC,kBAAmB,CAAC,IACpBC,WAAW,GAmCEoC,GAhCQ,SAACxC,EAAOyC,GAC7B,OAAQA,EAAOxK,MACb,IAAK,oBACH,OAAO,6BACF+H,GADL,IAEEuC,aAAcE,EAAOvK,UAEzB,IAAK,sBACH,OAAO,6BACF8H,GADL,IAEEC,eAAgBwC,EAAOvK,UAE3B,IAAK,uBACH,OAAO,6BACF8H,GADL,IAEEE,kBAAmBuC,EAAOvK,UAE9B,IAAK,yBACH,OAAO,6BACF8H,GADL,IAEEG,kBAAmBsC,EAAOvK,UAE9B,IAAK,uBACH,OAAO,6BACF8H,GADL,IAEEI,UAAWqC,EAAOvK,UAEtB,QACE,OAAO,gBAAKoK,M,kBCxBZI,GAAQC,uBAAYH,GAAgBI,+BAAoBC,2BAAgBC,QAE9EC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUP,MAAOA,IACf,kBAAC,GAAD,QAGJQ,SAASC,eAAe,SF+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7I,MAAK,SAAA8I,GACJA,EAAaC,gBAEd5I,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM4I,a,mBGxI5BC,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,MAAQ,8B","file":"static/js/main.75178632.chunk.js","sourcesContent":["export const setSelectedCity = (city) => ({\n  type: \"SET_SELECTED_CITY\",\n  payload: city,\n});\n\nexport const getForecastedWeather = (forecastWeather) => ({\n  type: \"GET_FORECAST_WEATHER\",\n  payload: forecastWeather,\n});\n\nexport const getHistoricalWeather = (historicalWeather) => ({\n  type: \"GET_HISTORICAL_WEATHER\",\n  payload: historicalWeather,\n});\n\nexport const getCurrentWeather = (currentWeather) => ({\n  type: \"GET_CURRENT_WEATHER\",\n  payload: currentWeather,\n});\n\nexport const setIsLoadingValue = (isLoadingValue) => ({\n  type: \"SET_IS_LOADING_VALUE\",\n  payload: isLoadingValue,\n});\n","import Moment from \"moment\";\nimport { extendMoment } from \"moment-range\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst moment = extendMoment(Moment);\n\nexport const extractCurrentWeatherInfo = ({ current }) => ({\n  id: uuidv4(),\n  weather: current.weather[0],\n  temperature: current.temp.toFixed(0) + \"°C\",\n  dayName: convertEpochToDate(current.dt),\n});\n\nexport const extractForecastedWeatherInfo = ({ daily }) =>\n  [...daily].slice(1, daily.lenght).map((item) => ({\n    id: uuidv4(),\n    dayName: convertEpochToDate(item.dt),\n    temperature: item.temp.day.toFixed(0) + \"°C\",\n    weather: item.weather[0],\n  }));\n\nexport const extractHistoricalWeatherInfo = (historicalWeatherList) =>\n  historicalWeatherList.map((item) => ({\n    id: uuidv4(),\n    dayName: convertEpochToDate(item.current.dt),\n    temperature: item.current.temp.toFixed(0) + \"°C\",\n    weather: item.current.weather[0],\n  }));\n\nexport const convertEpochToDate = (epochTime) =>\n  moment.unix(epochTime).format(\"MMMM D\");\n\nexport const getFivePreviousUnixTime = () => {\n  const range = moment.range(\n    moment().subtract(5, \"day\"),\n    moment().subtract(1, \"day\")\n  );\n  const previousDateArray = Array.from(range.by(\"day\"));\n  return previousDateArray.map((item) => moment(item).format(\"X\"));\n};\n","import axios from \"axios\";\nimport {\n  getCurrentWeather,\n  getHistoricalWeather,\n  getForecastedWeather,\n  setIsLoadingValue,\n} from \"../actions/actions\";\nimport {\n  extractCurrentWeatherInfo,\n  extractForecastedWeatherInfo,\n  getFivePreviousUnixTime,\n  extractHistoricalWeatherInfo,\n} from \"../utils/weatherUtils\";\n\nconst baseURL = \"https://api.openweathermap.org/data/2.5/onecall\";\nconst appId = \"2edd39c7c1d23b84acf5634f1c6fd741\";\n\nexport const getCurrentWeatherService = ({ lat, lon }) => async (dispatch) => {\n  return axios\n    .get(\n      `${baseURL}?lat=${lat}&lon=${lon}&exclude=minutely,hourly&units=metric&appid=${appId}`\n    )\n    .then((response) => {\n      dispatch(setIsLoadingValue(false));\n      dispatch(getCurrentWeather(extractCurrentWeatherInfo(response.data)));\n      dispatch(\n        getForecastedWeather(extractForecastedWeatherInfo(response.data))\n      );\n    })\n    .catch((error) => console.log(\"Error\", error));\n};\n\nconst getHistoricalWeatherByDate = (lat, lon, unixTime) =>\n  axios\n    .get(\n      `${baseURL}/timemachine?lat=${lat}&lon=${lon}&dt=${unixTime}&units=metric&appid=${appId}`\n    )\n    .then((response) => response.data)\n    .catch((error) => console.log(\"Error\", error));\n\nexport const getHistoricalWeatherService = ({lat, lon}) => async (dispatch) => {\n  Promise.all(\n    getFivePreviousUnixTime().map((time) =>\n      getHistoricalWeatherByDate(lat, lon, time)\n    )\n  )\n    .then((response) =>\n      dispatch(getHistoricalWeather(extractHistoricalWeatherInfo(response)))\n    )\n    .catch((error) => error);\n};\n","import React, { useState } from \"react\";\nimport { List, ListItem, ListItemText } from \"@material-ui/core\";\nimport { useDispatch } from \"react-redux\";\nimport { setSelectedCity, setIsLoadingValue } from \"../../actions/actions\";\nimport {\n  getCurrentWeatherService,\n  getHistoricalWeatherService,\n} from \"../../services/weatherService\";\nimport PropTypes from \"prop-types\";\n\nconst CitiesList = ({ cities }) => {\n  const [selectedIndex, setSelectedIndex] = useState(null);\n\n  const dispatch = useDispatch();\n\n  const handleSelectedCity = (event, index) => {\n    dispatch(setIsLoadingValue(true))\n    setSelectedIndex(index);\n    dispatch(setSelectedCity(cities[index]));\n    dispatch(getCurrentWeatherService(cities[index].coord));\n    dispatch(getHistoricalWeatherService(cities[index].coord));\n  };\n\n  return (\n    <List component=\"nav\">\n      {cities.map((city, index) => (\n        <ListItem\n          key={city.id}\n          button\n          selected={selectedIndex === index}\n          onClick={(event) => handleSelectedCity(event, index)}\n        >\n          <ListItemText inset primary={city.name} />\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nconst cityShape = PropTypes.shape({\n  id: PropTypes.number,\n  name: PropTypes.string,\n  coord: PropTypes.shape({\n    lon: PropTypes.number,\n    lat: PropTypes.number,\n  }),\n});\n\nCitiesList.propTypes = {\n  cities: PropTypes.arrayOf(cityShape),\n};\n\nexport default CitiesList;\n","import React from 'react'\nimport { Typography, makeStyles } from '@material-ui/core';\nimport { grey } from '@material-ui/core/colors';\nimport PropTypes from 'prop-types';\n\nconst useLargeStyles = makeStyles({\n    root: {\n        fontWeight:100,\n        fontSize: 100,\n        color: grey[800],\n    }\n});\n\nconst useSmallStyles = makeStyles({\n    root: {\n        fontSize: 15,\n        color: grey[600],\n    }\n});\nconst TemperatureText = ({isLarge=false, children}) => {\nconst largeClasses = useLargeStyles();\nconst smallClasses = useSmallStyles()\n\nreturn <Typography className={isLarge ? largeClasses.root: smallClasses.root}>{children}</Typography>\n}\n\nTemperatureText.propTypes={\n    isLarge: PropTypes.bool,\n    children: PropTypes.node\n}\n\nexport default TemperatureText;","import React from 'react';\nimport { grey } from '@material-ui/core/colors';\nimport { Typography, makeStyles } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\nconst useLargeStyles = makeStyles({\n    root: {\n        fontSize: 40,\n        color: grey[600],\n    }\n});\n\nconst useSmallStyles = makeStyles({\n    root: {\n        fontSize: 15,\n        color: grey[600],\n    }\n});\n\nconst DayTimeText = ({children, isLarge = false}) =>{\n    const largeClasses = useLargeStyles();\n    const smallClasses = useSmallStyles()\n    return <Typography className={isLarge ? largeClasses.root : smallClasses.root}>{children}</Typography>\n}\n\nDayTimeText.propTypes={\n    children: PropTypes.node,\n    isLarge: PropTypes.bool,\n}\n\nexport default DayTimeText;","import React from \"react\";\nimport styles from \"./WeatherImage.module.css\";\nimport PropTypes from 'prop-types';\n\nconst WeatherImage = ({ icon=\"\", description=\"\", isLarge=false }) => {\n  let link = `http://openweathermap.org/img/wn/${icon}@2x.png`;\n\n  return (\n    <img\n      className={isLarge ? styles.large : styles.small}\n      src={link}\n      alt={description}\n    />\n  );\n};\n\nWeatherImage.propTypes={\n  icon: PropTypes.string,\n  description: PropTypes.string,\n  isLarge: PropTypes.bool,\n}\n\nexport default WeatherImage;\n","import React from \"react\";\nimport TemperatureText from \"../atoms/TemperatureText\";\nimport DayTimeText from \"../atoms/DayNameText\";\nimport WeatherImage from \"../atoms/WeatherImage\";\nimport PropTypes from \"prop-types\";\nimport { Grid } from \"@material-ui/core\";\n\nconst WeatherInfo = ({ dayName, temperature, weather, isLarge }) => {\n  return (\n    <Grid container justify=\"center\" alignItems=\"center\" direction=\"column\">\n      <DayTimeText isLarge={isLarge}>{dayName}</DayTimeText>\n      <WeatherImage\n        icon={weather.icon}\n        description={weather.description}\n        isLarge={isLarge}\n      />\n      <TemperatureText isLarge={isLarge}>{temperature}</TemperatureText>\n    </Grid>\n  );\n};\n\nWeatherInfo.propTypes = {\n  id: PropTypes.number,\n  dayName: PropTypes.string,\n  temperature: PropTypes.string,\n  weather: PropTypes.shape({\n    icon: PropTypes.string,\n    description: PropTypes.string,\n  }),\n};\n\nexport default WeatherInfo;\n","import React from \"react\";\nimport { Grid, CardContent, Card } from \"@material-ui/core\";\nimport WeatherInfo from \"./WeatherInfo\";\nimport PropTypes from \"prop-types\";\n\nconst ExtraWeather = ({ weatherList }) => {\n  return (\n    <Grid container alignContent=\"space-between\" justify=\"center\" spacing={1}>\n      {weatherList.map((item) => {\n        const { dayName, temperature, weather, id } = item;\n        return (\n          <Grid key={id} item>\n            <Card>\n              <CardContent>\n                <WeatherInfo\n                  dayName={dayName}\n                  temperature={temperature}\n                  weather={weather}\n                  isLarge={false}\n                />\n              </CardContent>\n            </Card>\n          </Grid>\n        );\n      })}\n    </Grid>\n  );\n};\n\nconst weatherListShape = PropTypes.shape({\n  id: PropTypes.number,\n  dayName: PropTypes.string,\n  temperature: PropTypes.string,\n  weather: PropTypes.shape({\n    icon: PropTypes.string,\n    description: PropTypes.string,\n  }),\n});\n\nExtraWeather.propTypes = {\n  weatherList: PropTypes.arrayOf(weatherListShape),\n};\n\nexport default ExtraWeather;\n","import React from 'react';\nimport { grey } from '@material-ui/core/colors';\nimport { Typography, makeStyles } from '@material-ui/core';\n\nconst WelcomeText = () =>{\n    const titleStyle = makeStyles({\n        root:{\n            fontSize:50,\n            fontWeight: 200,\n            color:grey[800]\n        }\n    })();\n\n    const subTitleStyle = makeStyles({\n        root:{\n            fontSize:30,\n            fontWeight: 200,\n            color:grey[700]\n        }\n    })();\n\n    return(<>\n        <Typography className={titleStyle.root}>Welcome to the weather app</Typography>\n        <Typography className={subTitleStyle.root}>Select a city to show its weather</Typography>\n    </>)\n}\n\nexport default WelcomeText;","import React, { useEffect, useState } from \"react\";\nimport {\n  Grid,\n  Checkbox,\n  FormGroup,\n  FormControlLabel,\n  makeStyles,\n} from \"@material-ui/core\";\nimport WeatherInfo from \"../molecules/WeatherInfo\";\nimport ExtraWeather from \"../molecules/ExtraWeather\";\nimport { useSelector } from \"react-redux\";\nimport { isEmpty } from \"lodash\";\nimport WelcomeText from \"../atoms/WelcomeText\";\nimport { DisappearedLoading } from \"react-loadingg\";\nimport { grey } from \"@material-ui/core/colors\";\n\nconst WeatherMain = () => {\n  const containerStyle = makeStyles({\n    root: {\n      width: \"100%\",\n    },\n  })();\n\n  const [dayName, setDayName] = useState(\"\");\n  const [currentTemp, setCurrentTemp] = useState(\"\");\n  const [showHistoricalDays, setShowHistoricalDays] = useState(false);\n  const [showForecastedDays, setShowForecastedDays] = useState(false);\n\n  const {\n    currentWeather,\n    forecastedWeather,\n    historicalWeather,\n    isLoading,\n  } = useSelector((state) => ({\n    currentWeather: state.currentWeather,\n    forecastedWeather: state.forecastedWeather,\n    historicalWeather: state.historicalWeather,\n    isLoading: state.isLoading,\n  }));\n\n  useEffect(() => {\n    if (!isEmpty(currentWeather)) {\n      setCurrentTemp(currentWeather.temperature);\n      setDayName(currentWeather.dayName);\n    }\n  }, [currentWeather]);\n\n  const loadedInfo = (\n    <>\n      <WeatherInfo\n        dayName={dayName}\n        temperature={currentTemp}\n        weather={currentWeather.weather}\n        isLarge={true}\n      />\n      <FormGroup row>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={showHistoricalDays}\n              onChange={() => {\n                setShowHistoricalDays(!showHistoricalDays);\n                setShowForecastedDays(false);\n              }}\n              name=\"checkedB\"\n              color=\"primary\"\n            />\n          }\n          label=\"Show the latest 5 days \"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={showForecastedDays}\n              onChange={() => {\n                setShowForecastedDays(!showForecastedDays);\n                setShowHistoricalDays(false);\n              }}\n              name=\"checkedB\"\n              color=\"primary\"\n            />\n          }\n          label=\"Show the predicted 7 days\"\n        />\n      </FormGroup>\n      <br />\n      {showHistoricalDays && <ExtraWeather weatherList={historicalWeather} />}\n      {showForecastedDays && <ExtraWeather weatherList={forecastedWeather} />}\n    </>\n  );\n\n  return (\n    <Grid\n      className={containerStyle.root}\n      container\n      item\n      alignItems=\"center\"\n      direction=\"column\"\n    >\n      {isEmpty(currentWeather) ? (\n        <WelcomeText />\n      ) : isLoading ? (\n        //Style prop has an empty prop for centering the DisappearedLoading component into the Grid container\n        <DisappearedLoading style={{}} size=\"large\" color={grey[600]} />\n      ) : (\n        loadedInfo\n      )}\n    </Grid>\n  );\n};\n\nexport default WeatherMain;\n","import {orderBy} from 'lodash'\n\nconst cities = [{\n    \"id\": 3652462,\n    \"name\": \"Quito\",\n    \"coord\": {\n      \"lon\": -78.524948,\n      \"lat\": -0.22985\n    }\n  },\n  {\n    \"id\": 3657509,\n    \"name\": \"Guayaquil\",\n    \"coord\": {\n      \"lon\": -79.900002,\n      \"lat\": -2.16667\n    }\n  },\n  {\n    \"id\": 2643743,\n    \"name\": \"London\",\n    \"coord\": {\n      \"lon\": -0.12574,\n      \"lat\": 51.50853\n    }\n  },\n  {\n    \"id\": 5128581,\n    \"name\": \"New York City\",\n    \"coord\": {\n      \"lon\": -74.005966,\n      \"lat\": 40.714272\n    }\n  },\n  {\n    \"id\": 6359304,\n    \"name\": \"Madrid\",\n    \"coord\": {\n      \"lon\": -3.68275,\n      \"lat\": 40.489349\n    }\n  },\n  {\n    \"id\": 5095808,\n    \"name\": \"Bogota\",\n    \"coord\": {\n      \"lon\": -74.029861,\n      \"lat\": 40.876209\n    }\n  },\n  {\n    \"id\": 6455259,\n    \"name\": \"Paris\",\n    \"coord\": {\n      \"lon\": 2.35236,\n      \"lat\": 48.856461\n    }\n  },\n  {\n    \"id\": 4164138,\n    \"name\": \"Miami\",\n    \"coord\": {\n      \"lon\": -80.193657,\n      \"lat\": 25.774269\n    }\n  },\n  {\n    \"id\": 6356055,\n    \"name\": \"Barcelona\",\n    \"coord\": {\n      \"lon\": 2.12804,\n      \"lat\": 41.399422\n    }\n  },\n  {\n    \"id\": 2643123,\n    \"name\": \"Manchester\",\n    \"coord\": {\n      \"lon\": -2.23743,\n      \"lat\": 53.480949\n    }\n  },\n]\n\nexport const sortedCitiesList = orderBy(cities,['name'], ['asc']);","import React from 'react'\nimport Grid from '@material-ui/core/Grid';\nimport Card from '@material-ui/core/Card';\nimport { CardContent, makeStyles } from '@material-ui/core';\nimport CitiesList from '../molecules/CitiesList';\nimport { grey } from '@material-ui/core/colors';\nimport WeatherMain from '../organisms/WeatherMain';\nimport {sortedCitiesList} from '../../utils/cities';\n\nconst WheaterPage = () =>{\n    \n    const mainContainer = makeStyles({\n        root:{\n            height: '100vh'\n        }\n    })();\n\n    const weatherContainerStyle = makeStyles({\n        root:{\n            width: '100%',\n            background: grey[200],\n            padding: 10,\n        }\n    })();\n\n    const cardStyle = makeStyles({\n        root: {\n            width: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            background:grey[300]\n        }\n    })();\n\n    return(<>\n        <Grid className={mainContainer.root} container >\n            <Grid item xs={12} sm={12} md={2}>\n                <CitiesList cities={sortedCitiesList}/>\n            </Grid>\n            <Grid className={weatherContainerStyle.root} container item md={10}>\n                <Card className={cardStyle.root}>\n                    <CardContent>\n                        <WeatherMain/>\n                    </CardContent>\n                </Card>\n            </Grid>\n        </Grid>\n    </>)\n}\nexport default WheaterPage;","import React from 'react';\nimport './App.css';\nimport WheaterPage from './components/pages/WheaterPage';\n\nfunction App() {\n  return <WheaterPage />\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n  selectedCity: {},\n  currentWeather: {},\n  forecastedWeather: [{}],\n  historicalWeather: [{}],\n  isLoading: true,\n};\n\nconst weatherReducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_SELECTED_CITY\":\n      return {\n        ...state,\n        selectedCity: action.payload,\n      };\n    case \"GET_CURRENT_WEATHER\":\n      return {\n        ...state,\n        currentWeather: action.payload,\n      };\n    case \"GET_FORECAST_WEATHER\":\n      return {\n        ...state,\n        forecastedWeather: action.payload,\n      };\n    case \"GET_HISTORICAL_WEATHER\":\n      return {\n        ...state,\n        historicalWeather: action.payload,\n      };\n    case \"SET_IS_LOADING_VALUE\":\n      return {\n        ...state,\n        isLoading: action.payload,\n      };\n    default:\n      return { ...initialState };\n  }\n};\n\nexport default weatherReducer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'fontsource-roboto';\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport weatherReducer from './reducer/WeatherReducer'\nimport thunk from 'redux-thunk'\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nconst store = createStore(weatherReducer, composeWithDevTools(applyMiddleware(thunk)));\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"large\":\"WeatherImage_large__1t55a\",\"small\":\"WeatherImage_small__qX4aT\"};"],"sourceRoot":""}